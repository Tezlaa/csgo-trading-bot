from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, \
    KeyboardButton

"""--------------Top up balance steam---------------"""
top_up_balance_steam = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üîì–û—Ç–∫—Ä—ã—Ç–∞", callback_data='open_market'),
    InlineKeyboardButton('üîí–ó–∞–∫—Ä—ã—Ç–∞', callback_data='close_market'),
)

button_price = InlineKeyboardMarkup(row_width=3).add(
    InlineKeyboardButton("100—Ä—É–±", callback_data='100'),
    InlineKeyboardButton("300—Ä—É–±", callback_data='300'),
    InlineKeyboardButton("500—Ä—É–±", callback_data='500'),
    InlineKeyboardButton("1000—Ä—É–±", callback_data='1000'),
    InlineKeyboardButton("3000—Ä—É–±", callback_data='3000'),
    InlineKeyboardButton("5000—Ä—É–±", callback_data='5000'),
)

way_of_payment = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton('ü§ñ–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞', callback_data='bot'),
    InlineKeyboardButton('Qiwi', callback_data='qiwi'),
)


def offer_steam(user_id: str, msg_id: list):
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("‚úÖ–ü–æ–ø–æ–ª–Ω–µ–Ω–æ",
                             callback_data=f"topupsteam_agree_{user_id}_{msg_id}"),
        InlineKeyboardButton("‚ùå–ù–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ",
                             callback_data=f"topupsteam_notagree_{user_id}_{msg_id}"),
    )
    return kb


def qiwi_menu(is_url=True, url="", bill="") -> InlineKeyboardMarkup:
    qiwi_kb = InlineKeyboardMarkup(row_width=1)
    if is_url:
        url_qiwi = InlineKeyboardButton('–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É', url=url)
        qiwi_kb.insert(url_qiwi)
        
    check_qiwi = InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check_' + str(bill))
    qiwi_kb.insert(check_qiwi)
    return qiwi_kb


"""--------------------Balance out------------------"""
balance_out_start = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üíµ–Ø —Ö–æ—á—É –ø—Ä–æ–¥–∞—Ç—å –∫–µ–π—Å—ã", callback_data="want_sell"),
    InlineKeyboardButton("üí≥–Ø —Ö–æ—á—É –≤—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å –∏–∑ Steam", callback_data="want_balance_out_from_steam"),
)

wont_to_balance_out_on_steam = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üîë–í—ã–≤–µ—Å—Ç–∏ –∫–ª—é—á(–∏)", callback_data='out_key'),
    InlineKeyboardButton("‚è™–ù–∞–∑–∞–¥", callback_data='cancel_trade'),
)

check_on_trade = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üîé–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='check_trade'),
    InlineKeyboardButton("‚õî–û—Ç–º–µ–Ω–∞", callback_data="cancel_trade"),
)

go_to_balance_out_start = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="cancel_trade"),
)

sell_case_start = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚ûï–í—ã–±—Ä–∞—Ç—å –∫–µ–π—Å—ã", callback_data='select_case'),
)

select_path_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üíµ–í—ã–≤–µ—Å—Ç–∏", callback_data="go_to_out_case"),
    InlineKeyboardButton("‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å—ã", callback_data='add_case'),
)

check_on_trade_sell_case = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üîé–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='check_trade'),
    InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_to_menu"),
)


def count_case():
    number_case = InlineKeyboardMarkup(row_width=8)
    for number in range(1, 16):
        number_case.insert(InlineKeyboardButton(str(number), callback_data='count_' + str(number)))
    
    return number_case


def get_case_inline_kb(case: dict, how_much_case=9) -> InlineKeyboardMarkup:
    if how_much_case == 0:
        how_much_case = 10 * 10
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    len_case = len(case)
    
    for index, name in enumerate(case.keys()):
        keyboard.insert(InlineKeyboardButton(f'¬´{name}¬ª', callback_data='case_' + name))
        if how_much_case == index:
            last_case = [name, index]
            break
    
    try:
        if last_case[1] != len_case:
            keyboard.add(InlineKeyboardButton('‚Ü™–î—Ä—É–≥–∏–µ –∫–µ–π—Å—ã', callback_data='case_all'))
    except Exception:
        pass
        
    return keyboard
    

"""---------------------------Profile--------------------------"""
select_way_of_payment_bot = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("QIWI", callback_data='qiwi'),
    InlineKeyboardButton("üí≥–î—Ä—É–≥–æ–µ", callback_data='other_way_of_payment'),
)

info_about_buy = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üí≥–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data='go_to_payment'),
    InlineKeyboardButton("üí™–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data='manually'),
)


other = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("–°–±–µ—Ä–±–∞–Ω–∫", callback_data='payment_sberbank'),
    InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data='payment_tinkoff'),
    InlineKeyboardButton("–Æ–º–∞–Ω–∏", callback_data='payment_youmoney'),
    InlineKeyboardButton("Yota", callback_data='payment_yota'),
)


def check_cheque_admin(how_much: str, id_user: str, message_id: str):
    check_cheque_admin_kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("–ß–µ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ, –∑–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å " + how_much + "—Ä—É–±",
                             callback_data=f'GoodCheque_{id_user}_{how_much}_{message_id}'),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f'NotOkCheque_{id_user}_{how_much}_{message_id}'),
    )
    return check_cheque_admin_kb


"""---------------------------Trade case-----------------------"""
select_path_trade_case_kb = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üî´–í—ã–±—Ä–∞—Ç—å —Å–∫–∏–Ω—ã", callback_data="go_to_add_skins"),
    InlineKeyboardButton("üß∞–î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å—ã", callback_data='add_case'),
)

agree_or_no = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="agree"),
    InlineKeyboardButton("‚õî–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="not_agree"),
)

before_adding_skin = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚ûï–î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–Ω—ã", callback_data="go_to_add_skins"),
    InlineKeyboardButton("üöÄ–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±–º–µ–Ω—É", callback_data="go_to_trade"),
)

no_money_for_add_skin = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üöÄ–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±–º–µ–Ω—É", callback_data="go_to_trade"),
    InlineKeyboardButton("‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å—ã", callback_data='add_case'),
)


def select_skin_kb(how_much_price_case: str, all_skin_for_trade: dict, how_much_skin=10):
    if how_much_skin == 0:
        how_much_skin = 10 * 10
    
    skin_kb = InlineKeyboardMarkup(row_width=2)
    len_skin = len(all_skin_for_trade)
    
    index = 1
    for skin, price in all_skin_for_trade.items():
        if price < how_much_price_case:
            skin_kb.insert(
                KeyboardButton(skin, callback_data=f'skin_{skin}'),
            )
            if how_much_skin == index:
                last_skin = [skin, index]
                break
            index += 1
        
    if len(skin_kb.inline_keyboard) == 0:
        raise ZeroDivisionError
    
    try:
        if last_skin[1] != len_skin:
            skin_kb.add(InlineKeyboardButton('‚Ü™–î—Ä—É–≥–∏–µ —Å–∫—Ä–∏–Ω—ã', callback_data='skin_all'))
    except Exception:
        pass
    
    skin_kb.add(InlineKeyboardButton("üß∞–î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å", callback_data="add_case"))
    
    return skin_kb


"""------------------------------Rules-------------------------"""

select_rules = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üèπ–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞–∫–∫–∞—É–Ω—Ç—É", callback_data="requirements"),
    InlineKeyboardButton("‚ùì–ì–¥–µ –≤–∑—è—Ç—å –ª–æ–≥–∏–Ω", callback_data="where_to_get"),
    InlineKeyboardButton("üíµ–õ–∏–º–∏—Ç—ã –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="limit_on_payment"),
    InlineKeyboardButton("üí¢–ù–µ –ø—Ä–∏—à–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å", callback_data="no_money_came_in"),
    InlineKeyboardButton("üìâ–ü—Ä–∏—à–ª–∞ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ", callback_data="came_in_money_less"),
    InlineKeyboardButton("üí∞–ö–∞–∫ —è –ø–æ–ª—É—á—É —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –≤ steam?", callback_data="how_get_balance_steam"),
    InlineKeyboardButton("üõ°–ü–æ–ª–∏—Ç–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", callback_data="return_policy"),
)

go_to_back_by_rules = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚è™–ù–∞–∑–∞–¥", callback_data="go_to_back"),
)

"""------------------------------Game---------------------------"""

game_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚úÇ–ö–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞", callback_data="stone_scissor_paper"),
    InlineKeyboardButton("üê¶–ü–æ–ø–∞–¥–∏ –≤ –ø—Ç–∏—Ü—É", callback_data="kill_bird"),
    InlineKeyboardButton("ü¶Ö–û—Ä—ë–ª –∏ —Ä–µ—à–∫–∞", callback_data="eagle_and_tails"),
)

# stone_scissor_paper
menu_ssp = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üöÄ–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ", callback_data="go_to_play_ssp"),
    InlineKeyboardButton("‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_to_game_menu"),
)

choice_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üóø–ö–∞–º–µ–Ω—å", callback_data="choicessp_stone"),
    InlineKeyboardButton("‚úÇ–ù–æ–∂–Ω–∏—Ü—ã", callback_data="choicessp_scissor"),
    InlineKeyboardButton("üìú–ë—É–º–∞–≥–∞", callback_data="choicessp_paper"),
)

win_ssp = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("ü§ë–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_again_ssp"),
    InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å", callback_data="take_win"),
)

lose_ssp = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("ü§ë–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="go_to_play_ssp"),
    InlineKeyboardButton("‚è™–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É", callback_data="go_to_game_menu"),
)

# kill bird
menu_kbg = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üöÄ–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ", callback_data="go_to_play_kbg"),
    InlineKeyboardButton("‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_to_game_menu"),
)

choice_kbg_kb = InlineKeyboardMarkup(row_width=2)
up = InlineKeyboardButton("‚¨Ü", callback_data="choicekbg_up")
left = InlineKeyboardButton("‚¨Ö", callback_data="choicekbg_left")
right = InlineKeyboardButton("‚û°", callback_data="choicekbg_right")
choice_kbg_kb.insert(up)
choice_kbg_kb.add(left)
choice_kbg_kb.insert(right)

win_kbg = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("ü§ë–ò–≥—Ä–∞—Ç—å –¥–∞–ª—å—à–µ", callback_data="play_again_kbg"),
    InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å", callback_data="take_win"),
)

lose_kbg = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üíµ–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="go_to_play_kbg"),
    InlineKeyboardButton("‚è™–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É", callback_data="go_to_game_menu"),
)

# eagle_and_tails
menu_eat = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("üöÄ–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–≥—Ä–µ", callback_data="go_to_play_eat"),
    InlineKeyboardButton("‚è™–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_to_game_menu"),
)

choice_eat = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("ü¶Ö–û—Ä—ë–ª", callback_data="choiceeat_eagle"),
    InlineKeyboardButton("ü™ô–†–µ—à–∫–∞", callback_data="choiceeat_tails"),
)

result_eat = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("ü§ë–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="play_again_eat"),
    InlineKeyboardButton("‚è™–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É", callback_data="go_to_game_menu"),
)