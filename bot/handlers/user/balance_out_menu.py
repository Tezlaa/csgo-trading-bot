from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from bot.handlers.user.different import get_all_price_case, get_case, get_text_with_all_case,\
    send_message_all_admin
from bot.keyboards import inline
from bot.keyboards.reply import back_kb


class FsmWantOutBalanceFromSteam(StatesGroup):
    name_steam = State()
    other_data_for_offer = State()


class FsmSelectCase(StatesGroup):
    which_case = State()
    how_much = State()
    name_steam = State()
    other_data_for_offer = State()


async def balance_out(msg: types.Message):
    if type(msg) == types.CallbackQuery:
        msg.answer = msg.message.edit_text
    elif msg.text != '‚Ü™–ù–∞–∑–∞–¥':
        await msg.answer('–í—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å', reply_markup=back_kb)
     
    await msg.answer('‚ùó–í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç 100–†.'
                     '–í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ Qiwi, –ÆMoney, –°–±–µ—Ä–ë–∞–Ω–∫, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –ú–¢–°, Yota –∏ –¥—Ä—É–≥–∏–µ –∫–æ—à–µ–ª—å–∫–∏.'
                     '<em>–ö–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–µ–º!</em>', reply_markup=inline.balance_out_start)


async def balance_out_from_steam(call: types.CallbackQuery, state: FsmWantOutBalanceFromSteam):
    await call.message.edit_text('üîë–í—ã –¥–æ–ª–∂–Ω—ã –∫—É–ø–∏—Ç—å –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞–º Mann Co. Supply Crate Key –∏–∑ Team Fortress 2.'
                                 '<b>–ó–∞ –∫–∞–∂–¥—ã–π –∫–ª—é—á –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 96–†.</b>',
                                 reply_markup=inline.wont_to_balance_out_on_steam)


async def out_key(call: types.CallbackQuery):  # need link on trade
    trade_link = 'https://www.google.com.ua/'
    await call.message.edit_text(f'‚è≥–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±–º–µ–Ω –ø–æ —ç—Ç–æ–π <a href="{trade_link}">–°–°–´–õ–ö–ê</a>',
                                 parse_mode="HTML", reply_markup=inline.check_on_trade)
    

async def check_user_on_trade(call: types.CallbackQuery):
    await FsmWantOutBalanceFromSteam.name_steam.set()
    await call.message.edit_text("üìù–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à –Ω–∏–∫ –∏–∑ Steam.")


async def set_name_steam(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name_steam"] = msg.text
    
    await msg.answer("üìù–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
                     "<em>1) –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.\n"
                     "2) –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫ –∫–æ—à–µ–ª—å–∫—É.\n"
                     "3) –§.–ò.–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n"
                     "4) –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).</em>\n")
    
    await FsmWantOutBalanceFromSteam.next()


async def set_message_by_user(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["message_by_user"] = msg.text
    
    username = msg.from_user.username if msg.from_user.username != "None" else msg.from_user.first_name
    
    text_for_admin = (f"_‚ùó–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –∫–ª—é—á–µ–π_\n"
                      f"Nickname steam: `{data['name_steam']}`\n"
                      f"Telegram –¥–ª—è —Å–≤—è–∑–∏: `@{username}`\n"
                      f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data['message_by_user']}")
    
    await msg.answer("‚è≥–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. –í —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –¥–µ–Ω—å–≥–∏.\n"
                     "<em>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.</em>",
                     reply_markup=inline.go_to_balance_out_start)
    await state.finish()
    await send_message_all_admin(text_for_admin)


async def sell_case(call: types.CallbackQuery):
    await FsmSelectCase.which_case.set()
    await call.message.edit_text(f"üß∞–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å—ã –∏–∑ –≤–∞—à–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è\n"
                                 f"{await get_text_with_all_case()}",
                                 reply_markup=inline.sell_case_start)


async def set_case(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å:", reply_markup=inline.get_case_inline_kb(get_case()))


async def set_how_case(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'case_all':
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å:", reply_markup=inline.get_case_inline_kb(get_case(), 0))
        return
    
    case = call.data.split("_")[1]
    async with state.proxy() as data:
        try:
            data["all_case"] += [{case: 0}]
        except KeyError:
            data["all_case"] = []
            data["all_case"] += [{case: 0}]
                    
        data["case"] = case
    await call.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–µ–π—Å–æ–≤ ¬´{case}¬ª", reply_markup=inline.count_case())

    await FsmSelectCase.next()


async def info_about_adding(call: types.CallbackQuery, state: FSMContext):
    how_much = int(call.data.split("_")[1])
    async with state.proxy() as data:
        data["all_case"][len(data["all_case"]) - 1][data["case"]] += how_much
        
    text_with_all_case = ""
    for all_case in data["all_case"]:
        for case, count in all_case.items():
            text_with_all_case += f'   –ö–µ–π—Å:  <b>{case}</b> - <em>{count}—à—Ç.</em>\n'
        
    await call.message.edit_text(f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏:\n"
                                 f"{text_with_all_case}",
                                 reply_markup=inline.select_path_kb)


async def adding_case_path(call: types.CallbackQuery, state: FSMContext):  # need trade link
    if call.data == 'add_case':
        await FsmSelectCase.first()
        await sell_case(call)
    else:
        trade_link = 'https://www.google.com.ua/'
        async with state.proxy() as data:
            await call.message.edit_text(f"üíé–ü–æ—Å–ª–µ –æ–±–º–µ–Ω–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: "
                                         f"<b>{await get_all_price_case(data['all_case'], get_case())}—Ä—É–±</b>\n\n"
                                         f"<em>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–π–¥ –ø–æ —ç—Ç–æ–π <a href=\"{trade_link}\">–°–°–´–õ–ö–ï</a></em>",
                                         reply_markup=inline.check_on_trade)
        await FsmSelectCase.next()


async def check_trade_sell_case(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("üìù–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–∞—à –Ω–∏–∫ –∏–∑ Steam.")


async def set_name_steam_sell_case(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name_steam"] = msg.text
    
    await msg.answer("üìù–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
                     "<em>1) –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.\n"
                     "2) –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫ –∫–æ—à–µ–ª—å–∫—É.\n"
                     "3) –§.–ò.–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n"
                     "4) –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).</em>\n")
    
    await FsmSelectCase.next()


async def set_message_by_user_sell_case(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["message_by_user"] = msg.text
    
    username = msg.from_user.username if msg.from_user.username != "None" else msg.from_user.first_name
        
    price_all_case = await get_all_price_case(data['all_case'], get_case())
    text_with_all_case = ""
    for all_case in data["all_case"]:
        for case, count in all_case.items():
            text_with_all_case += f'   *{case}* - _{count}—à—Ç._\n'
    
    text_for_admin = (f"_‚ùó–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –∫–ª—é—á–µ–π_\n"
                      f"Nickname steam: `{data['name_steam']}`\n"
                      f"Telegram –¥–ª—è —Å–≤—è–∑–∏: `@{username}`\n"
                      f"–¶–µ–Ω–∞ –∫–µ–π—Å–æ–≤: *{price_all_case}—Ä—É–±\n*"
                      f"–ö–µ–π—Å—ã:\n{text_with_all_case}"
                      f"\n–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *{data['message_by_user']}*")
    
    await msg.answer("‚è≥–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. –í —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –¥–µ–Ω—å–≥–∏.\n"
                     "<em>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.</em>",
                     reply_markup=inline.go_to_balance_out_start)
    await state.finish()
    await send_message_all_admin(text_for_admin)


def register_balance_out_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(balance_out, text=['cancel_trade'], state="*")
    dp.register_message_handler(balance_out, Text(equals=['üíµ–í—ã–≤–µ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å', '‚Ü™–ù–∞–∑–∞–¥']), state="*")
    
    dp.register_callback_query_handler(balance_out_from_steam, text="want_balance_out_from_steam")
    dp.register_callback_query_handler(out_key, text='out_key')
    dp.register_callback_query_handler(check_user_on_trade, text='check_trade')
    dp.register_message_handler(set_name_steam, state=FsmWantOutBalanceFromSteam.name_steam)
    dp.register_message_handler(set_message_by_user, state=FsmWantOutBalanceFromSteam.other_data_for_offer)
    dp.register_callback_query_handler(sell_case, text='want_sell')
    dp.register_callback_query_handler(set_case, text='select_case', state=FsmSelectCase)
    dp.register_callback_query_handler(set_how_case, text_contains='case_', state=FsmSelectCase.which_case)
    dp.register_callback_query_handler(info_about_adding, text_contains="count_", state=FsmSelectCase.how_much)
    dp.register_callback_query_handler(adding_case_path, text=['go_to_out_case', 'add_case'], state=FsmSelectCase)
    dp.register_callback_query_handler(check_trade_sell_case, text='check_trade', state=FsmSelectCase)
    dp.register_message_handler(set_name_steam_sell_case, state=FsmSelectCase.name_steam)
    dp.register_message_handler(set_message_by_user_sell_case, state=FsmSelectCase.other_data_for_offer)
