import random

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from bot.keyboards.inline import game_menu, menu_ssp, choice_kb, win_ssp, lose_ssp, menu_kbg, choice_kbg_kb, win_kbg,\
    lose_kbg
from bot.keyboards.reply import game_main_kb, start_kb
from bot.database.sqlite_db import get_balance_user, set_balance, unbalance


class FsmSSP(StatesGroup):
    ssp_game = State()
    set_bet_to_game = State()
    choice_user = State()
    
    select_path = State()


class FsmKBG(StatesGroup):
    kill_bird_game = State()
    set_bet_to_game = State()
    choice_user = State()
    
    select_path = State()
    

async def go_to_menu(msg: (types.Message or types.CallbackQuery), state: FSMContext):
    await state.finish()
    if type(msg) == types.CallbackQuery:
        msg.answer = msg.message.edit_text
    else:
        await msg.answer("üéÆ–ú–∏–Ω–∏ –∏–≥—Ä—ã", reply_markup=game_main_kb)

    await msg.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É:", reply_markup=game_menu)


async def ssp_info(call: types.CallbackQuery):
    await call.message.edit_text("‚úÇ–ò–≥—Ä–∞ '–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞'\n\n"
                                 "<em>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:\n"
                                 "‚Äî –∫–∞–º–µ–Ω—å –ø–æ–±–µ–∂–¥–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã (–∫–∞–º–µ–Ω—å –∑–∞—Ç—É–ø–ª—è–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã)\n"
                                 "‚Äî –Ω–æ–∂–Ω–∏—Ü—ã –ø–æ–±–µ–∂–¥–∞—é—Ç –±—É–º–∞–≥—É (–Ω–æ–∂–Ω–∏—Ü—ã —Ä–∞–∑—Ä–µ–∑–∞—é—Ç –±—É–º–∞–≥—É)\n"
                                 "‚Äî –±—É–º–∞–≥–∞ –ø–æ–±–µ–∂–¥–∞–µ—Ç –∫–∞–º–µ–Ω—å (–±—É–º–∞–≥–∞ –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å)\n"
                                 "‚Äî –Ω–∏—á—å—è, –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∑–Ω–∞–∫</em>\n",
                                 reply_markup=menu_ssp)
    await FsmSSP.ssp_game.set()
    

async def play_ssp_menu(call: types.CallbackQuery, state: FSMContext):
    global min_rate
    balance = await get_balance_user(call.from_user.id)
    
    min_rate = 10  # minimum bet to play
    
    if balance > min_rate:
        await call.message.edit_text(f'–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: {await get_balance_user(call.from_user.id)} —Ä—É–±\n'
                                     f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {min_rate} —Ä—É–±\n'
                                     f'–í—ã–∏–≥—Ä–∞—à +30% –∫ –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–µ\n\n'
                                     f'üöÄ<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:</b>')
        await FsmSSP.next()
    else:
        await call.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞")
        await call.message.delete()
        
        await call.message.answer(f'üí¢–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: {await get_balance_user(call.from_user.id)}—Ä—É–±\n'
                                  f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {min_rate} —Ä—É–±\n\n'
                                  f'‚ùó<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–≥—Ä—ã!</b>',
                                  reply_markup=start_kb)


async def play_ssp(msg: types.Message, state: FSMContext):
    balance_user = await get_balance_user(msg.from_user.id)
    
    try:
        bet = int(msg.text)
    except ValueError:
        await msg.answer("‚ùó–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    if balance_user < bet:
        await msg.answer(f'üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ {bet - balance_user} —Ä—É–±!\n'
                         f'–°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—å—à–µ —Å—Ç–∞–≤–∫—É!')
        return
    elif bet < min_rate:
        await msg.answer(f'‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {min_rate} —Ä—É–±')
        return
    
    async with state.proxy() as data:
        data["bet"] = bet
        data["bet_start"] = bet
        
    await msg.answer("–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:", reply_markup=choice_kb)
    await FsmSSP.next()
        

async def result_game_ssp(call: types.CallbackQuery, state: FSMContext):
    """
    1 - STONE
    2 - SCHERE
    3 - PAPER
    """
    enemy = random.randint(1, 3)
    user_choice = call.data.split("_")[1]
    dict_game = {"stone": 1, "scissor": 2, "paper": 3}
    
    async with state.proxy() as data:
        pass
    
    # win
    if dict_game[user_choice] == 1 and enemy == 2 or dict_game[user_choice] == 2 and enemy == 3 or dict_game[user_choice] == 3 and enemy == 1:
        balance_before_win = data["bet"] * 1.35
        
        await call.message.edit_text(f'üèÜ–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n'
                                     f'üíé–í–∞—à –≤—ã–∏–≥—Ä–∞—à: <b>{balance_before_win} —Ä—É–±</b>',
                                     reply_markup=win_ssp)
        async with state.proxy() as data:
            data["bet"] = balance_before_win
        await FsmSSP.next()
    # lose
    elif enemy == 1 and dict_game[user_choice] == 2 or enemy == 2 and dict_game[user_choice] == 3 or enemy == 3 and dict_game[user_choice] == 1:
        await call.message.edit_text('üí¢–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n'
                                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                                     reply_markup=lose_ssp)
        await unbalance(data["bet_start"], call.from_user.id)
        await FsmSSP.ssp_game.set()
        return
    # draw
    else:
        await call.message.edit_text('üöÄ–ù–∏—á—å—è!\n'
                                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                                     reply_markup=win_ssp)
        await FsmSSP.next()


async def path_ssp(call: types.CallbackQuery, state: FSMContext):
    if call.data == "play_again_ssp":
        await call.message.edit_text("–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:", reply_markup=choice_kb)
        await FsmSSP.choice_user.set()
    elif call.data == "take_win":
        async with state.proxy() as data:
            pass
        
        balance_before_game = await get_balance_user(call.from_user.id)
        winning = data["bet"] - data["bet_start"]
        
        await set_balance(balance=(balance_before_game + winning), user_id=call.from_user.id)
        await call.message.edit_text(f'üíé–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{winning} —Ä—É–±</b>!', reply_markup=game_menu)
        await state.finish()


async def kill_bird_info(call: types.CallbackQuery):
    await call.message.edit_text("üê¶–ò–≥—Ä–∞ <b>'–ü–æ–ø–∞–¥–∏ –≤ –ø—Ç–∏—Ü—É'</b>\n\n"
                                 "<em>–ù—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ç–∏—Ü—ã\n"
                                 "–ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —É–º–Ω–æ–∂–µ–Ω–∏–µ –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏, –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å!</em>",
                                 reply_markup=menu_kbg)
    await FsmKBG.kill_bird_game.set()


async def play_kbg_menu(call: types.CallbackQuery, state: FSMContext):
    global min_rate
    balance = await get_balance_user(call.from_user.id)
    
    min_rate = 10  # minimum bet to play
    
    if balance > min_rate:
        await call.message.edit_text(f'üöÄ–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: {await get_balance_user(call.from_user.id)} —Ä—É–±\n'
                                     f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {min_rate} —Ä—É–±\n'
                                     f'–£–≥–∞–¥–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ç–∏—Ü—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥\n\n'
                                     f'<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:</b>')
        await FsmKBG.next()
    else:
        await call.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞")
        await call.message.delete()
        
        await call.message.answer(f'üí¢–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: {await get_balance_user(call.from_user.id)}—Ä—É–±\n'
                                  f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {min_rate} —Ä—É–±\n\n'
                                  f'‚ùó<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–≥—Ä—ã!</b>',
                                  reply_markup=start_kb)
        
        
async def play_kbg(msg: types.Message, state: FSMContext):
    balance_user = await get_balance_user(msg.from_user.id)
    
    try:
        bet = int(msg.text)
    except ValueError:
        await msg.answer("‚ùó–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    if balance_user < bet:
        await msg.answer(f'üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ {bet - balance_user} —Ä—É–±!\n'
                         f'–°–¥–µ–ª–∞–π—Ç–µ –º–µ–Ω—å—à–µ —Å—Ç–∞–≤–∫—É!')
        return
    elif bet < min_rate:
        await msg.answer(f'‚ùó–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {min_rate} —Ä—É–±')
        return
    
    async with state.proxy() as data:
        data["factor"] = 1.2
        data["bet"] = bet
        
    await msg.answer("–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:", reply_markup=choice_kbg_kb)
    await FsmKBG.next()
    
    
async def result_game_kbg(call: types.CallbackQuery, state: FSMContext):
    user_choice = call.data.split("_")[1]
    bird = random.randint(1, 3)
    dict_game = {"up": 1, "left": 2, "right": 3}
    
    async with state.proxy() as data:
        pass
    
    if dict_game[user_choice] == bird:
        balance_before_win = data["bet"] * data["factor"]
        
        await call.message.edit_text(f'üèÜ–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n'
                                     f'–í–∞—à –≤—ã–∏–≥—Ä–∞—à: <b>{balance_before_win} —Ä—É–±</b>\n'
                                     f'üíé–°–ª–µ–¥—É—é—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: <b>{data["factor"] + 0.3}X</b>\n',
                                     reply_markup=win_kbg)
        async with state.proxy() as data:
            data["factor"] += 0.3
        
        await FsmKBG.next()
    elif dict_game[user_choice] != bird:
        await call.message.edit_text('üí¢–í—ã –Ω–µ –ø–æ–ø–∞–ª–∏\n'
                                     '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                                     reply_markup=lose_kbg)
        await unbalance(data["bet"], call.from_user.id)
        await FsmKBG.kill_bird_game.set()
        return


async def path_kbg(call: types.CallbackQuery, state: FSMContext):
    if call.data == "play_again_kbg":
        await call.message.edit_text("–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä:", reply_markup=choice_kbg_kb)
        await FsmKBG.choice_user.set()
    elif call.data == "take_win":
        async with state.proxy() as data:
            pass
        
        balance_before_game = await get_balance_user(call.from_user.id)
        winning = data["bet"] * data["factor"]
        
        await set_balance(balance=(balance_before_game + winning), user_id=call.from_user.id)
        await call.message.edit_text(f'üíé–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{winning} —Ä—É–±!</b>', reply_markup=game_menu)
        await state.finish()

        
def register_game_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(go_to_menu, text="go_to_game_menu", state="*")
    dp.register_message_handler(go_to_menu, Text(equals=["–ú–∏–Ω–∏ –∏–≥—Ä—ã", "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É"]), state="*")
    
    dp.register_callback_query_handler(ssp_info, text="stone_scissor_paper")
    dp.register_callback_query_handler(play_ssp_menu, text="go_to_play_ssp", state=FsmSSP.ssp_game)
    dp.register_message_handler(play_ssp, content_types=["text"], state=FsmSSP.set_bet_to_game)
    dp.register_callback_query_handler(result_game_ssp, text_contains=["choicessp_"], state=FsmSSP.choice_user)
    dp.register_callback_query_handler(path_ssp, text=["play_again_ssp", "take_win"], state=FsmSSP.select_path)
    
    dp.register_callback_query_handler(kill_bird_info, text="kill_bird")
    dp.register_callback_query_handler(play_kbg_menu, text="go_to_play_kbg", state=FsmKBG.kill_bird_game)
    dp.register_message_handler(play_kbg, content_types=["text"], state=FsmKBG.set_bet_to_game)
    dp.register_callback_query_handler(result_game_kbg, text_contains=["choicekbg_"], state=FsmKBG.choice_user)
    dp.register_callback_query_handler(path_kbg, text=["play_again_kbg", "take_win"], state=FsmKBG.select_path)
    

