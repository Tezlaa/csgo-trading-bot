
import random
from datetime import datetime, timedelta

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from bot import main
from bot.database.sqlite_db import unbalance
from bot.handlers.user.different import send_message_all_admin
from bot.keyboards import inline
from bot.keyboards.reply import go_to_main_menu, select_type_market_kb, start_kb

from glQiwiApi.qiwi.clients.p2p.types import Bill


class FsmMarket(StatesGroup):
    set_trade_link = State()
    set_login = State()
    set_amount = State()
    select_payment = State()
    payment_p2p = State()


async def top_up_steam(msg: types.Message):
    await msg.answer('‚ùó–û—Ç –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –∫—É—Ä—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n<b>–£ –≤–∞—Å –æ—Ç–∫—Ä—ã—Ç–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞?</b>',
                     reply_markup=inline.top_up_balance_steam)


async def open_market(call: types.CallbackQuery):
    await FsmMarket.set_trade_link.set()
    
    await main.bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º‚§µ',
                              reply_markup=select_type_market_kb)


async def close_market(call: types.CallbackQuery):
    await FsmMarket.set_login.set()
    
    await main.bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer('üë§–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Steam.\n(–ß—Ç–æ —Ç–∞–∫–æ–µ –ª–æ–≥–∏–Ω, –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ FAQ)',
                              reply_markup=go_to_main_menu)


async def set_link(msg: types.Message, state: FSMContext):
    if msg.text == "‚ùì–ì–¥–µ –≤–∑—è—Ç—å —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É?":
        await msg.answer("https://www.youtube.com/watch?v=w3-eDOaOjx8")
        await msg.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º‚§µ',
                         reply_markup=go_to_main_menu)
        return
    elif msg.text.find("https://steamcommunity.com/tradeoffer/new/") == 0:
        async with state.proxy() as data:
            data["user_link"] = msg.text
            data["close_market"] = False
        await FsmMarket.next()
        await FsmMarket.next()
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö',
                         reply_markup=inline.button_price)
    else:
        await msg.answer("‚ö†–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ‚§µ",
                         reply_markup=select_type_market_kb)
        return


async def set_user_login(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["user_login"] = msg.text
        data["close_market"] = True
    await msg.answer('üíµ–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö',
                     reply_markup=inline.button_price)
    await FsmMarket.next()


async def set_amount(msg, state: FSMContext):
    if type(msg) is types.CallbackQuery:
        async with state.proxy() as data:
            data["amount"] = msg.data
            msg = msg.message
    else:
        try:
            if int(msg.text) > 100:
                async with state.proxy() as data:
                    data["amount"] = msg.text
            else:
                await msg.answer('‚ö†–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 100—Ä—É–±\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö',
                                 reply_markup=inline.button_price)
                return
        except ValueError:
            await msg.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!", reply_markup=inline.button_price)
            return

    async with state.proxy() as data:
        try:
            data["link_or_login"] = f'–õ–æ–≥–∏–Ω: {data["user_login"]}'
        except KeyError:
            data["link_or_login"] = f'–¢—Ä–µ–π–¥-—Å—Å—ã–ª–∫–∞: <a href="{data["user_link"]}">–°–°–´–õ–ö–ê</a>'
        
        if data["close_market"]:
            money_get = int(data["amount"]) - (int(data["amount"]) * 0.20)
        else:
            money_get = int(data["amount"]) * 1.03
    await main.bot.delete_message(msg.chat.id, msg.message_id)
    await main.bot.send_message(msg.chat.id,
                                text=f'üìù–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ\n\n'
                                     f'{data["link_or_login"]}\n'
                                     f'–ó–∞–ø–ª–∞—Ç–∏—Ç–µ: {data["amount"]}—Ä—É–±\n'
                                     f'–ü–æ–ª—É—á–∏—Ç–µ: {money_get}—Ä—É–±\n\n'
                                     f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</b>',
                                reply_markup=inline.way_of_payment,
                                disable_web_page_preview=True)
    await FsmMarket.next()


async def select_payment(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["payment_via"] = call.data

    if data["payment_via"] == 'bot':
        try:
            await unbalance(data['amount'], call.from_user.id)
        except ValueError:  # if not enough balance
            await call.message.edit_text('‚ö†–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –±–æ—Ç–∞!\n'
                                         '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö',
                                         reply_markup=inline.button_price)
            return await FsmMarket.previous()

        await state.finish()
        await call.message.answer("üíµ–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞, –∂–¥–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
                                  reply_markup=start_kb)

        # send all admin
        if data["link_or_login"][:5] == "–¢—Ä–µ–π–¥":
            login_or_link = data["link_or_login"].split('"')[1]
        else:
            login_or_link = data["link_or_login"]

        text_for_admin = (f"_‚ùó–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam_\n"
                          f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: `{login_or_link}`\n"
                          f"–ß–µ—Ä–µ–∑ {data['payment_via']} –Ω–∞ ***{data['amount']}—Ä—É–±***")

        await send_message_all_admin(text_for_admin)

    elif data["payment_via"] == 'qiwi':
        comment = str(call.from_user.id) + "_" + str(random.randint(10000, 99999))

        bill = await main.p2p_qiwi.create_p2p_bill(amount=data['amount'],
                                                   expire_at=(datetime.now() + timedelta(minutes=3)),
                                                   comment=comment)

        await call.message.edit_text(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ <em>{data["amount"]}—Ä—É–±<em> –Ω–∞ —Å—á—ë—Ç QIWI\n'
                                     f'–£–∫–∞–∑–∞–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ–ø–ª–∞—Ç–µ: {comment}\n'
                                     f'<a href="{bill.pay_url}">–°–°–´–õ–ö–ê</a>',
                                     reply_markup=inline.qiwi_menu(url=bill.pay_url, bill=bill.id),
                                     parse_mode="HTML")

        await FsmMarket.next()


async def qiwi_payment(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        bill: Bill = data.get("bill")

    if await main.p2p_qiwi.check_if_bill_was_paid(bill):

        async with state.proxy() as data:
            if data["link_or_login"][:5] == "–¢—Ä–µ–π–¥":
                login_or_link = data["link_or_login"].split('"')[1]
            else:
                login_or_link = data["link_or_login"].split(" ")[1]

            text_for_admin = (f"_‚ùó–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam_\n"
                              f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: `{login_or_link}`\n"
                              f"–ß–µ—Ä–µ–∑ {data['payment_via']} –Ω–∞ ***{data['amount']}—Ä—É–±***")

            await send_message_all_admin(text_for_admin)

        await call.message.delete()
        await call.message.answer('‚è≥–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                                  reply_markup=start_kb)
        await state.finish()
    else:
        await call.message.answer('‚ö†–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç', reply_markup=inline.qiwi_menu(is_url=False, bill=bill.id))


def register_top_up_balance_steam_handlers(dp: Dispatcher):
    dp.register_message_handler(top_up_steam, Text(equals='üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å steam'))

    dp.register_callback_query_handler(open_market, text='open_market')
    dp.register_callback_query_handler(close_market, text='close_market')
    dp.register_message_handler(set_link, state=FsmMarket.set_trade_link)
    dp.register_message_handler(set_user_login, state=FsmMarket.set_login)
    dp.register_callback_query_handler(set_amount, state=FsmMarket.set_amount)
    dp.register_message_handler(set_amount, state=FsmMarket.set_amount)
    dp.register_callback_query_handler(select_payment, state=FsmMarket.select_payment)
    dp.register_callback_query_handler(qiwi_payment, text_contains="check_", state=FsmMarket.payment_p2p)