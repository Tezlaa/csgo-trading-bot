from aiogram import Dispatcher, types

from bot import main
from bot.database.sqlite_db import get_admin_id, top_up_balance, get_all_user, set_active, get_all_active
from bot.handlers.user.different import delete_cheque


async def send_msg_all_user(msg: types.Message):
    text = msg.text[9:]
    if str(msg.from_user.id) in await get_admin_id():
        for user_id in await get_all_user():
            try:
                await main.bot.send_message(user_id[0], text)
                await set_active(user_id[0], 1)
            except Exception:
                await set_active(user_id[0], 0)
        await msg.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    return


async def get_stat(msg: types.Message):
    if str(msg.from_user.id) in await get_admin_id():
        all_user = len(await get_all_user())
        active_user = len(await get_all_active())
        delete_user = all_user - active_user
        admins = len(await get_admin_id())
        
        await msg.answer(f"‚ñ™Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_user}\n"
                         f"‚ñ´Ô∏è–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_user}\n"
                         f"‚ñ´Ô∏è–£–¥–∞–ª–µ–Ω–Ω—ã—Ö: {delete_user}\n"
                         f"‚ñ™Ô∏è–ê–¥–º–∏–Ω–æ–≤: {admins}")
                   
            
async def top_up_balance_steam(call: types.CallbackQuery):
    data_kb = call.data.split("_")
    user_id = data_kb[2]
    msg_id = data_kb[3]
    how_much = data_kb[4]
    isbot = data_kb[5]

    if data_kb[1] == "agree":
        await main.bot.send_message(user_id, text="üíé–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!")
        for admin_id in await get_admin_id():
            await delete_cheque(admin_id, msg_id, text="–ü–æ–ø–æ–ª–Ω–µ–Ω–æ!‚úÖ")
    elif data_kb[1] == "notagree":
        if isbot == "+":
            await main.bot.send_message(user_id, "‚ùó–ù–µ –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å Steam\n"
                                                 "–í—ã–ø–æ–ª–Ω–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å")
            await top_up_balance(how_much, user_id)
        else:
            await main.bot.send_message(user_id, "‚ùó–ù–µ –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å Steam\n")
        for admin_id in await get_admin_id():
            await delete_cheque(admin_id, msg_id, text="–ù–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ!‚ùå")


async def check_is_good(call: types.CallbackQuery):
    data = call.data.split("_")
    id_user = data[1]
    how_much = data[2]
    msg_id = data[3]
    
    await top_up_balance(how_much, id_user)
    for admin_id in await get_admin_id():
        await delete_cheque(admin_id, msg_id, text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!‚úÖ")
        
    await main.bot.send_message(id_user, f"üíé–í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{how_much}—Ä—É–±</b> –Ω–∞ –±–∞–ª–∞–Ω—Å")
    

async def check_is_not_ok(call: types.CallbackQuery):
    data = call.data.split("_")
    id_user = data[1]
    how_much = data[2]
    msg_id = data[3]
    
    await main.bot.send_message(id_user, f"‚ùó–ù–µ –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{how_much}</b>—Ä—É–±\n"
                                         f"‚ùå–ß–µ–∫ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
    
    for admin_id in await get_admin_id():
        await delete_cheque(admin_id, msg_id, text="–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!‚ùå")
    

def register_admin_handlers(dp: Dispatcher):
    dp.register_message_handler(get_stat, commands=['statistic'])
    dp.register_message_handler(send_msg_all_user, commands=['sendAll'])
    dp.register_callback_query_handler(top_up_balance_steam, text_contains='topupsteam_')
    
    dp.register_callback_query_handler(check_is_good, text_contains='GoodCheque_')
    dp.register_callback_query_handler(check_is_not_ok, text_contains='NotOkCheque_')